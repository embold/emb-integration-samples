name: Build and Test

on:
  push:
    branches:
      - github_action_java
  pull_request:
    branches:
      - github_action_java

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java environment
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Use Eclipse Temurin JDK
          java-version: '17'     # Update this version as per project requirements

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Run Maven build
      - name: Build with Maven
        run: |
              cd sample_source_code/JAVA/commons-lang
              # mvn clean install jacoco:report --batch-mode

     # Step 5: Download and un-tar the BrowserStack CQ Scanner
      - name: Download and Unpack BrowserStack CQ Scanner
        run: |
          curl https://v1.embold.io/nfs/CLI/browserstack-codequality-scanner.tar.gz -o browserstack-codequality-scanner-archive.tar.gz
          tar xvf browserstack-codequality-scanner-archive.tar.gz
        
     # Step 6: Run the BrowserStack CQ Scanner
      - name: Run Static Code Analysis
        continue-on-error: true
        env:
          EMBOLD_TOKEN: ${{ secrets.EMBOLD_TOKEN_IDE_INST }}
        run: |
          ./browserstack-codequality-scanner/bin/embold-scanner analyse \
          -u https://packages.embold.io/ \
          -t $EMBOLD_TOKEN \
          -r a42b8343cd0a77237f3880808027a25a \
          -c sample_source_code/JAVA/commons-lang/repository-configuration.json \
          -qg

      # Step 7: Call the Quality Gate Status API. This fetches the quality gate status for the latest published snapshot.
      # We can also pass a 'snapshot label' to get the status for a specific snapshot. However, since we provided the "-qg" option in the previous step,
      # "Step 6" will wait until the result is published on the UI. In this step, we will retrieve the latest result.
      - name: Call Quality Gate Status API
        id: call-api
        run: |
          response=$(curl -v -X GET "https://packages.embold.io/api/v1/repositories/a42b8343cd0a77237f3880808027a25a/qualitygateprofiles/status" \
          -H "Authorization: Bearer ${{ secrets.EMBOLD_TOKEN_IDE_INST }}")
          echo "response=$response" >> $GITHUB_ENV

      - name: Print Quality Gate Status
        run: |
          status=$(echo "${{ env.response }}" | jq -r '.status')
          echo "Quality Gate Status: $status"
        env:
          response: ${{ env.response }}
